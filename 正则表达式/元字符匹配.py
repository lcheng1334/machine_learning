""""""
import re

"""
正则表达式: 一种字符串的验证规则, 通过特殊的字符串组合来确立规则
"""
"""
单字符匹配
. : 匹配任意一个字符, 本身可以使用\.匹配 
[]: 匹配[]列举的所有字符, 例如范围[a-zA-Z0-9]或[aerfkSCNH45]单个字符
\d: 匹配数字0-9
\D: 匹配非数字
\s: 匹配空白, 即空格和tab键
\S: 匹配非空白
\w: 匹配单词字符, a-z, A-Z, 0-9, _
\W: 匹配非单词字符
"""

str = "owkl1334@qq.com#15297889192"
# 找出所有数字
result1 = re.findall(r"\d", str)
# print(result1)
# ['1', '3', '3', '4', '1', '5', '2', '9', '7', '8', '8', '9', '1', '9', '2']
# 找出特殊字符
result2 = re.findall(r"\W", str)
# print(result2) # ['@', '.', ' ']
# 找出全部英文字母
result3 = re.findall(r"[a-zA-Z]", str)
# print(result3) # ['o', 'w', 'k', 'l', 'q', 'q', 'c', 'o', 'm']
"""
数量匹配
*     : 匹配前一个规则的字符出现次数 > 0 
+     : 匹配前一个规则的字符出现次数 > 1
?     : 匹配前一个规则的字符出现次数为1或0
{m}   : 匹配前一个规则的字符出现次数为m
{m, } : 匹配前一个规则的字符出现次数 > m
{m, n}: 匹配前一个规则的字符出现次数为m到n 
"""

"""
边界匹配
^   : 匹配字符串开头
$   : 匹配字符串结尾
\b  : 匹配一个单词边界
\B  : 匹配非单词边界
"""

"""
分组匹配
|   : 匹配左右任意一个表达式
()  : 将括号中字符作为一个分组
"""

# 匹配一个账号, 只能由字母和数字组成, 长度限制6到10位
r1 = "^[a-zA-Z0-9]{6,10}$" # 正则表达式中不能包含空格
str1 = "1a2b3c4d"
print(re.findall(r1, str1))

# 匹配QQ号, 要求纯数字, 长度5到11位, 第一位不为0
r2 = "^[1-9][0-9]{4,10}$"
str2 = "01925536156"
print(re.findall(r2, str2))

# 匹配邮箱地址, 只允许qq、163、gmail三种邮箱地址
r3 = "(^[\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$)"
str3 = "1925536156@qaq.com"
print(re.match(r3, str3))